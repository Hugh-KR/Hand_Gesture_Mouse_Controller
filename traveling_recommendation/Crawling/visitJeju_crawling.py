# -*- coding: utf-8 -*-
"""crawling.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dNRK7iu4Kj-ywEeLMDlWEzDsYKpsZ31F
"""

from selenium import webdriver
import time
from selenium.webdriver.common.keys import Keys 
import pandas as pd
import os

from selenium.webdriver.common.by import By

# 크롬창(웹드라이버) 열기
driver = webdriver.Chrome("C:/Users/ljyda/Desktop/WebCrawling/chromedriver.exe")

# 성산일출봉 접속하기
driver.get("https://www.visitjeju.net/kr/detail/list?menuId=DOM_000001718004000000&cate1cd=cate0000000002&cate2cd=cate0000000011#p1&region2cd&pageSize=6&sortListType=reviewcnt&viewType=thumb")
time.sleep(1)

# 팝업창 제거
driver.find_element_by_css_selector('#footer > div.add2020_questionnaire > button > span').click()



# 이전 여행목록 페이지 번호
theme_before=100

# 여행목록 페이지 순회
while(theme_before != 0) : 
    
    for i in range(0, 6):
        place_page = driver.find_element_by_css_selector('#content > div > div.cont_wrap > div.recommend_area > ul')
        place_list = place_page.find_elements_by_class_name('item_top')
        
        # 특정 여행장소 페이지 입장
        place_name = place_list[i].find_element_by_class_name('s_tit').text 
        place_list[i].click()
        time.sleep(2)
        
        # 장소에 대한 댓글 및 태그 수집
        #크롤링데이터저장할 빈 리스트(text-댓글/ tag-댓글 태그) 
        text_list = []
        tag_list = []
        text_list, tag_list = text_bar_jumping(text_list, tag_list)
        
        # 데이터 저장
        data_to_csv(place_name, text_list, tag_list)
        
        # 여행장소 목록 페이지로 복귀 
        driver.back()
        driver.back()
        time.sleep(3)
        
    # 다음 여행목록 페이지로 이동
    theme_before = theme_bar_jumping(theme_before)

def get_review(review_list, text_list, tag_list):
    review = review_list.find_elements_by_class_name('review_txt')
    tag = review_list.find_elements_by_class_name('check_list')
    
    for i in range(0, len(review)):
        text_list.append(review[i].text)
        tag_ = tag[i].find_elements_by_css_selector('a')
        
        semi_list = []
        for item in tag_:
            semi_list.append(item.text)
            
        tag_list.append(semi_list)
        time.sleep(1)
        
    return text_list, tag_list

def text_bar_jumping(text_list, tag_list):
    
    review_list = driver.find_element(By.XPATH, '//*[@id="tab3"]')
    review_list.click()
    page_bar = review_list.find_element(By.XPATH, '//*[@id="paging"]')
    pages = page_bar.find_elements_by_css_selector('a')

    isend = False
    page_before=0
    while(isend != True):
        page_now = page_bar.find_element_by_class_name('current').text
        print(page_now)    
        
        if page_now != page_before:
            text_list, tag_list = get_review(review_list, text_list, tag_list)
            page_before = page_now
            page_bar.find_element_by_class_name('spr_com.page-next').send_keys(Keys.ENTER)
            time.sleep(1)
        else :
            isend = True
    
    return text_list, tag_list

def theme_bar_jumping(theme_before):

    theme_bar = driver.find_element(By.XPATH, '//*[@id="paging"]')
    theme_page = theme_bar.find_elements_by_css_selector('a')
      
    theme_now = theme_bar.find_element_by_class_name('current').text

    if theme_now != theme_before:
        theme_before = theme_now
        theme_bar.find_element_by_class_name('spr_com.page-next').send_keys(Keys.ENTER)
        time.sleep(2)
        return theme_before
    else:
        return 0

def data_to_csv(place_name, review_list, tag_list):
#데이터프레임으로 저장
    results_df = pd.DataFrame({"name":[place_name]*len(tag_list),"content":review_list,"tags":tag_list})

    #csv파일로 저장
    if(os.path.exists('레져_체험.csv')):
        results_df.to_csv('레져_체험.csv',mode='a', encoding='utf-8-sig', header=False)
    else:
        results_df.to_csv('레져_체험.csv',mode='w', encoding='utf-8-sig')

def get_info(info):
    info_html = driver.find_elements_by_class_name('_grid-system-row_')
    for i in range(0, len(info_html)):
        if len(info_html[i].text)!=0:
            info = info + info_html[i].text
            print(info)
    time.sleep(1)
    return info

# 크롬창(웹드라이버) 열기
driver = webdriver.Chrome("C:/Users/ljyda/Desktop/WebCrawling/chromedriver.exe")

# 성산일출봉 접속하기
driver.get("https://www.visitjeju.net/kr/detail/list?menuId=DOM_000001718004000000&cate1cd=cate0000000002&cate2cd=cate0000000011#p1&region2cd&pageSize=6&sortListType=reviewcnt&viewType=thumb")
time.sleep(1)

# 팝업창 제거
driver.find_element_by_css_selector('#footer > div.add2020_questionnaire > button > span').click()



# 이전 여행목록 페이지 번호
theme_before=100

# 여행목록 페이지 순회
while(theme_before != 0) : 
    
    for i in range(0, 6):
        place_page = driver.find_element_by_css_selector('#content > div > div.cont_wrap > div.recommend_area > ul')
        place_list = place_page.find_elements_by_class_name('item_top')
        
        # 특정 여행장소 페이지 입장
        place_name = place_list[i].find_element_by_class_name('s_tit').text 
        place_list[i].click()
        time.sleep(2)
        
        # 장소에 대한 댓글 및 태그 수집
        #크롤링데이터저장할 빈 리스트(text-댓글/ tag-댓글 태그) 
        info =''
        info=  get_info(info)
        
        # 데이터 저장
        info_to_csv(place_name, info)
        
        # 여행장소 목록 페이지로 복귀 
        driver.back()
        time.sleep(1)
        
    # 다음 여행목록 페이지로 이동
    theme_before = theme_bar_jumping(theme_before)

def info_to_csv(place_name, info):
#데이터프레임으로 저장
    results_df = pd.DataFrame({"name":[place_name],"content":[info]})
    #csv파일로 저장
    if(os.path.exists('레져체험_본문.csv')):
        results_df.to_csv('레져체험_본문.csv',mode='a', encoding='utf-8-sig', header=False)
    else:
        results_df.to_csv('레져체험_본문.csv',mode='w', encoding='utf-8-sig')

